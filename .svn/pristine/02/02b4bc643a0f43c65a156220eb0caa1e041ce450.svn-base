package com.zx.emanage.inve.service.impl;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.math.BigDecimal;
import java.sql.Timestamp;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.zx.emanage.inve.persist.WmsInveClerkDataDao;
import com.zx.emanage.inve.persist.WmsInveClerkProtocolDao;
import com.zx.emanage.inve.persist.WmsInveCreditEmailDao;
import com.zx.emanage.inve.persist.WmsInveTransaCrepkgDao;
import com.zx.emanage.inve.persist.WmsInveTransaDao;
import com.zx.emanage.inve.persist.WmsInveTransaProdDao;
import com.zx.emanage.inve.persist.WmsInveTransaProtocolDao;
import com.zx.emanage.inve.persist.WmsInveTransaUpdateLogDao;
import com.zx.emanage.inve.service.IWmsInveClerkProtocolService;
import com.zx.emanage.inve.service.IWmsInveSignedApplicationService;
import com.zx.emanage.inve.service.IWmsInveTransaCrepkgService;
import com.zx.emanage.inve.service.IWmsInveTransaService;
import com.zx.emanage.inve.util.credit.CreditBusiness;
import com.zx.emanage.inve.util.credit.CreditUtils;
import com.zx.emanage.inve.vo.WmsInveClerkProtocolSearchBeanVO;
import com.zx.emanage.inve.vo.WmsInveClerkProtocolVO;
import com.zx.emanage.inve.web.WmsInveClerkProtocolController;
import com.zx.emanage.loanappro.persist.WmsSysPropertyDao;
import com.zx.emanage.sysmanage.persist.PmPersonnelDao;
import com.zx.emanage.sysmanage.persist.SysSpecialUserDao;
import com.zx.emanage.util.gen.SysTools;
import com.zx.emanage.util.gen.entity.PmPersonnel;
import com.zx.emanage.util.gen.entity.SysSpecialUser;
import com.zx.emanage.util.gen.entity.WmsInveClerkData;
import com.zx.emanage.util.gen.entity.WmsInveClerkProtocol;
import com.zx.emanage.util.gen.entity.WmsInveCreditEmail;
import com.zx.emanage.util.gen.entity.WmsInveRedeem;
import com.zx.emanage.util.gen.entity.WmsInveRedeemDetail;
import com.zx.emanage.util.gen.entity.WmsInveTransa;
import com.zx.emanage.util.gen.entity.WmsInveTransaCrepkg;
import com.zx.emanage.util.gen.entity.WmsInveTransaProtocol;
import com.zx.platform.syscontext.util.StringUtil;
import com.zx.platform.syscontext.vo.GridDataBean;
import com.zx.sframe.util.DateUtil;
import com.zx.sframe.util.JasperUtil;
import com.zx.sframe.util.digitUpperUtil;
import com.zx.sframe.util.vo.UserBean;

/*
 * @version 2.0
 */

@Service("wmsinveclerkprotocolService")
public class WmsInveClerkProtocolServiceImpl implements IWmsInveClerkProtocolService
{
    private static Logger log = LoggerFactory.getLogger(WmsInveClerkProtocolServiceImpl.class);

    @Autowired
    private WmsInveClerkProtocolDao wmsinveclerkprotocolDao;

    @Autowired
    private IWmsInveSignedApplicationService signedApplicationService;

    @Autowired
    private WmsInveTransaDao wmsInveTransaDao;

    @Autowired
    private WmsInveClerkDataDao wmsInveClerkDataDao;

    @Autowired
    private WmsInveTransaCrepkgDao wmsInveTransaCrepkgDao;

    @Autowired
    private WmsInveTransaProdDao wmsInveTransaProdDao; // 上单产品信息表

    @Autowired
    private WmsInveTransaProtocolDao wmsInveTransaProtocolDao;

    @Autowired
    private PmPersonnelDao pmPersonnelDao;

    @Autowired
    private WmsInveTransaUpdateLogDao wmsinvetransaupdatelogDao;

    @Autowired
    private SysSpecialUserDao specialUserDao;

    @Autowired
    private IWmsInveTransaCrepkgService wmsInveTransaCrepkgService;

    @Autowired
    private WmsInveCreditEmailDao wmsInveCreditEmailDao;

    @Autowired
    private IWmsInveTransaService wmsInveTransaService;

    @Autowired
    private WmsSysPropertyDao wmsSysPropertyDao;

    /**
     * @Title: getWmsInveClerkProtocolId
     * @Description: 获得柜员协议表id
     * @param transaId 上单主键
     * @param productAccount 投资金额（赎回时，如果没有打印合同的情况下多次进行赎回时，需要根据投资金额分辨合同）
     * @param type 数据类型： 2续期单据，3赎回单据
     * @return 获得协议主键
     * @author: jinzhm
     * @time:2017年2月20日 上午8:23:46
     * @see com.zx.emanage.inve.service.IWmsInveClerkProtocolService#getWmsInveClerkProtocolId(java.lang.Integer, int)
     * history:
     * 1、2017年2月20日 jinzhm 创建方法
    */
    @Override
    public Integer getWmsInveClerkProtocolId(Integer transaId, BigDecimal productAccount, int type)
    {
        // 如果是续期单据，查找续期单据协议信息返回主键
        if (type == 2)
        {
            return wmsinveclerkprotocolDao.getWmsInveExtendProtocolByTransaId(transaId).get(0)
                                          .getWms_inve_clerk_protocol_id();
        }
        // 如果是赎回单据，查找赎回单据协议信息返回主键
        else if (type == 3)
        {
            Map<String, Object> paramMap = new HashMap<String, Object>();
            paramMap.put("transaId", transaId);
            paramMap.put("productAccount", productAccount);
            return wmsinveclerkprotocolDao.getWmsInveRedeemProtocolByTransaId(paramMap).get(0)
                                          .getWms_inve_clerk_protocol_id();
        }
        return -1;
    }

    /**
     * @Title: changeProtocolCredit
     * @Description: 更换债权包信息
     * @param transaId 上单主键
     * @param protocolId 合同主键
     * @param categoryId 产品主键
     * @param user 登录用户信息
     * @return 债权更换结果
     *  1表示匹配成功
     *  2表示产品不是可拆分类型
     *  3表示没有要到期的债权包
     *  -1表示债权匹配失败
     * @author: jinzhm
     * @time:2017年2月15日 上午11:26:39
     * @see com.zx.emanage.inve.service.IWmsInveClerkProtocolService#changeProtocolCredit(int, int, int, com.zx.sframe.util.vo.UserBean)
     * history:
     * 1、2017年2月15日 jinzhm 创建方法
    */
    @Override
    @Transactional
    public int changeProtocolCredit(int transaId, int protocolId, int categoryId, UserBean user)
    {
        return CreditBusiness.getInstance().changeMatchedCredit(transaId, protocolId, categoryId, user);
    }

    @Override
    public Map<String, Object> getWmsInveClerkProtocolById(WmsInveClerkProtocolSearchBeanVO wmsInveClerkProtocolSearchBeanVO)
    {
        // 通过传入的合同id 查询合同相关信息
        Map<String, Object> map = wmsinveclerkprotocolDao.getWmsInveClerkProtocolById(wmsInveClerkProtocolSearchBeanVO);
        // 将小写数字转成大写放到map中
        if (map.get("sum_cre_pledge_mon_lower") != null)
        {
            map.put("sum_cre_pledge_mon_upper", digitUpperUtil.digitUppercase(((BigDecimal) map.get("sum_cre_pledge_mon_lower")).doubleValue(), true).replaceAll("万元", ""));
        }

        return map;
    }

    /**
     * @Title: save
     * @Description: 上单时合同打印调用
     * 1、更新上单表的date_of_payment和合同编码
     * 2、生成柜员合同表数据、更新债权匹配历史表数据、更新债权历史表的合同编号
     * 3、调用流程保存方法
     * 4、更新柜员单据表是否完成为已完成状态
     * @param begin_of_date
     * @param user
     * @return 
     * @author: Guanxu
     * @time:2017年2月14日 上午10:44:49
     * @see com.zx.emanage.inve.service.IWmsInveClerkProtocolService#save(java.lang.String, com.zx.sframe.util.vo.UserBean)
     * history:
     * 1、2017年2月14日 Guanxu 创建方法
    */
    @Override
    @Transactional
    public String save(String begin_of_date, Integer wms_inve_transa_id, UserBean user, String protocol_type,
                       String taskId, String prot_code)
    {

        // 判断合同生效日期>=实际支付日期
        WmsInveTransa wmsInveTransa = wmsInveTransaDao.get(wms_inve_transa_id);
        DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
        try
        {
            String result = wmsInveTransaUpdateLogValidate(df.parse(begin_of_date));
            if ("error".equals(result))
            {
                return "date_error_check";
            }
            // 合同签订时，合同生效时间设置往后修改限制片段
            String days = wmsSysPropertyDao.get(CreditUtils.DAY_RANGE_PROPERTY_ID).getProperty_value();
            if (df.parse(begin_of_date).compareTo(DateUtil.getDateAddDays(wmsInveTransa.getDate_of_act(),
                                                                          Integer.parseInt(days))) > 0)
            {
                return "date_error_check";
            }
            if (df.parse(begin_of_date).compareTo(wmsInveTransa.getDate_of_act()) < 0)
            {
                return "date_error";
            }
        }
        catch (ParseException e)
        {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        // 1生成柜员合同表数据 2线下合同释放债权
        saveWmsInveClerkProtocol(begin_of_date, wms_inve_transa_id, protocol_type, prot_code, user);
        // 更新date_of_payment和合同编码
        updateWmsInvetransaDateOfPaymentById(begin_of_date, wms_inve_transa_id);
        // 更新柜员单据表状态为已完成
        updateWmsInveClerkDataStatus(wms_inve_transa_id);
        // 更新上单表中合同签订情况类型（2为线上合同，1为线下合同） jinzhm 2017-03-14添加
        if ("2".equals(protocol_type))
        {
            updateWmsInveTransaSigningType(wms_inve_transa_id, "1");
        }
        // TODO Auto-generated method stub
        String resultStr = signedApplicationService.sigendProd(wms_inve_transa_id.toString(), taskId, user.getUserId()
                                                                                                          .toString());

        return resultStr;
    }

    /**
     * @Title: updateWmsInveTransaSigningType
     * @Description: 更改单据的协议签订方式
     * @param transaId 单据主键
     * @param signingType 1表示线下合同，2表示线上合同
     * @author: jinzhm
     * @time:2017年3月14日 下午1:37:16
     * history:
     * 1、2017年3月14日 jinzhm 创建方法
     */
    private void updateWmsInveTransaSigningType(int transaId, String signingType)
    {
        WmsInveTransa transa = new WmsInveTransa();
        transa.setWms_inve_transa_id(transaId);
        transa.setContract_signing_type(signingType);
        wmsInveTransaDao.update(transa);
    }

    private String wmsInveTransaUpdateLogValidate(Date changeDate)
    {
        // 获得支付时间
        Date nowDate = new java.sql.Date(DateUtil.getDate10(new java.util.Date()).getTime());

        // 查找要修改到日期的结账时间配置信息
        Map<String, Object> changeDateRuleMap = wmsinvetransaupdatelogDao.getTransaJobTime(DateUtil.date2String(changeDate, "yyyy-MM"));

        // 如果要修改到的日期月份有结账配置信息
        if (changeDateRuleMap != null)
        {
            // 获得结账日期
            Date ruleDate = (Date) changeDateRuleMap.get("job_date");
            // 如果当前时间和上单时间小于等于结账时间
            if (nowDate.compareTo(ruleDate) > 0)
            {
                return "error";
            }
        }

        return "success";
    }


    /**
     * @Title: getWmsInveClerkProtocolList
     * @Description: 客户合同查询
     * @param queryInfo
     * @return 
     * @author: zhangyunfei
     * @time:2017年2月14日 下午2:59:00
     * @see com.zx.emanage.inve.service.IWmsInveClerkProtocolService#getWmsInveClerkProtocolList(com.zx.emanage.inve.vo.WmsInveClerkProtocolSearchBeanVO)
     * history:
     * 1、2017年2月14日 Administrator 创建方法
    */
    @Override
    public Map<String, Object> getWmsInveClerkProtocolList(WmsInveClerkProtocolSearchBeanVO queryInfo, UserBean user)
    {
        Map<String, Object> paramMap = new HashMap<String, Object>();
        if (StringUtil.isNotBlank(queryInfo.getBill_code()))
        {
            paramMap.put("bill_code", queryInfo.getBill_code());
        }
        if (StringUtil.isNotBlank(queryInfo.getId_card()))
        {
            paramMap.put("id_card", queryInfo.getId_card());
        }
        if (StringUtil.isNotBlank(queryInfo.getCus_name()))
        {
            paramMap.put("cus_name", SysTools.getSqlLikeParam(queryInfo.getCus_name()));
        }
        if (StringUtil.isNotBlank(queryInfo.getMobile_phone()))
        {
            paramMap.put("mobile_phone", queryInfo.getMobile_phone());
        }
        if (StringUtil.isNotBlank(queryInfo.getCategory_name()))
        {
            paramMap.put("category_name", queryInfo.getCategory_name());
        }
        if (StringUtil.isNotBlank(queryInfo.getProt_code()))
        {
            paramMap.put("prot_code", queryInfo.getProt_code());
        }
        if (StringUtil.isNotBlank(queryInfo.getSalesman_name()))
        {
            paramMap.put("salesman_name", queryInfo.getSalesman_name());
        }
        if (StringUtil.isNotBlank(queryInfo.getBegin_of_date_begin()))
        {
            paramMap.put("begin_of_date_begin", queryInfo.getBegin_of_date_begin());
        }
        if (StringUtil.isNotBlank(queryInfo.getBegin_of_date_end()))
        {
            paramMap.put("begin_of_date_end", queryInfo.getBegin_of_date_end());
        }
        if (StringUtil.isNotBlank(queryInfo.getEnd_of_date_begin()))
        {
            paramMap.put("end_of_date_begin", queryInfo.getEnd_of_date_begin());
        }
        if (StringUtil.isNotBlank(queryInfo.getEnd_of_date_end()))
        {
            paramMap.put("end_of_date_end", queryInfo.getEnd_of_date_end());
        }

        paramMap.put("sortname", queryInfo.getSortname());
        paramMap.put("sortorder", queryInfo.getSortorder());
        paramMap.put("pagesize", queryInfo.getPagesize());
        paramMap.put("offset", queryInfo.getOffset());
        List<Map<String, Object>> list = wmsinveclerkprotocolDao.getWmsInveClerkProtocolList(paramMap);

        // 实现对数据信息屏蔽效果
        SysSpecialUser specialUser = new SysSpecialUser();
        specialUser.setEnable_flag("1");
        List<SysSpecialUser> specilaUsers = specialUserDao.getListByEntity(specialUser);
        list = SysTools.setListView(list, user, specilaUsers);

        GridDataBean<Map<String, Object>> bean = new GridDataBean<Map<String, Object>>(queryInfo.getPage(), wmsinveclerkprotocolDao.findCountProtocol(paramMap), list);
        return bean.getGridData();
    }
    
    /**
     * @Title: getWmsInveClerkProtocolWithoutpagingList
     * @Description: 客户合同查询 不分页
     * @param queryInfo
     * @return 
     * @author: zhangyunfei
     * @time:2017年2月14日 下午2:59:00
     * @see com.zx.emanage.inve.service.IWmsInveClerkProtocolService#getWmsInveClerkProtocolList(com.zx.emanage.inve.vo.WmsInveClerkProtocolSearchBeanVO)
     * history:
     * 1、2017年2月14日 Administrator 创建方法
    */
    @Override
    public Map<String, Object> getWmsInveClerkProtocolWithoutpagingList(WmsInveClerkProtocolSearchBeanVO queryInfo)
    {
        Map<String, Object> paramMap = new HashMap<String, Object>();
        if (StringUtil.isNotBlank(queryInfo.getBill_code()))
        {
            paramMap.put("bill_code", queryInfo.getBill_code());
        }
        if (StringUtil.isNotBlank(queryInfo.getId_card()))
        {
            paramMap.put("id_card", queryInfo.getId_card());
        }
        if (StringUtil.isNotBlank(queryInfo.getCus_name()))
        {
            paramMap.put("cus_name", SysTools.getSqlLikeParam(queryInfo.getCus_name()));
        }
        if (StringUtil.isNotBlank(queryInfo.getMobile_phone()))
        {
            paramMap.put("mobile_phone", queryInfo.getMobile_phone());
        }
        if (StringUtil.isNotBlank(queryInfo.getCategory_name()))
        {
            paramMap.put("category_name", queryInfo.getCategory_name());
        }
        if (StringUtil.isNotBlank(queryInfo.getProt_code()))
        {
            paramMap.put("prot_code", queryInfo.getProt_code());
        }
        if (StringUtil.isNotBlank(queryInfo.getSalesman_name()))
        {
            paramMap.put("salesman_name", queryInfo.getSalesman_name());
        }
        if (StringUtil.isNotBlank(queryInfo.getBegin_of_date_begin()))
        {
            paramMap.put("begin_of_date_begin", queryInfo.getBegin_of_date_begin());
        }
        if (StringUtil.isNotBlank(queryInfo.getBegin_of_date_end()))
        {
            paramMap.put("begin_of_date_end", queryInfo.getBegin_of_date_end());
        }
        if (StringUtil.isNotBlank(queryInfo.getEnd_of_date_begin()))
        {
            paramMap.put("end_of_date_begin", queryInfo.getEnd_of_date_begin());
        }
        if (StringUtil.isNotBlank(queryInfo.getEnd_of_date_end()))
        {
            paramMap.put("end_of_date_end", queryInfo.getEnd_of_date_end());
        }

        paramMap.put("sortname", queryInfo.getSortname());
        paramMap.put("sortorder", queryInfo.getSortorder());
        List<Map<String, Object>> list = wmsinveclerkprotocolDao.getWmsInveClerkProtocolList(paramMap);
        // 加密id_card
        for (Map<String, Object> map : list)
        {
            String idCard = (String) map.get("id_card");
            if (idCard != null)
            {
                if (!idCard.equals("") && idCard.length() == 18)
                {
                    map.put("id_card", idCard.substring(0, 3) + "********" + idCard.substring(15, idCard.length()));
                }
                else if (!idCard.equals(""))
                {
                    map.put("id_card", "********");
                }
            }
        }

        GridDataBean<Map<String, Object>> bean = new GridDataBean<Map<String, Object>>(queryInfo.getPage(), wmsinveclerkprotocolDao.findCountProtocol(paramMap), list);
        return bean.getGridData();
    }

    /**
     * @Title: updateProtocolActEndOfDateById
     * @Description: 根据合同表主键更新柜员合同表实际到期日为当前时间
     * @param zhangyunfei 
     * @author: Administrator
     * @time:2017年2月15日 下午1:05:50
     * @see com.zx.emanage.inve.service.IWmsInveClerkProtocolService#updateWmsInveClerkProtocol(com.zx.emanage.util.gen.entity.WmsInveClerkProtocol)
     * history:
     * 1、2017年2月15日 Administrator 创建方法
    */
    @Override
    public void updateProtocolActEndOfDateById(Integer wms_inve_clerk_protocol_id)
    {
        wmsinveclerkprotocolDao.updateProtocolActEndOfDateById(wms_inve_clerk_protocol_id);
    }

    /**
     * @Title: getWmsInveClerkProtocolByEntity
     * @Description: TODO(这里用一句话描述这个方法的作用)
     * @param wmsInveClerkProtocol
     * @return 
     * @author: zhangyunfei
     * @time:2017年2月15日 下午1:33:57
     * @see com.zx.emanage.inve.service.IWmsInveClerkProtocolService#getWmsInveClerkProtocolByEntity(com.zx.emanage.util.gen.entity.WmsInveClerkProtocol)
     * history:
     * 1、2017年2月15日 Administrator 创建方法
    */
    @Override
    public WmsInveClerkProtocol getWmsInveClerkProtocolByEntity(WmsInveClerkProtocol wmsInveClerkProtocol)
    {
        return wmsinveclerkprotocolDao.getWmsInveClerkProtocolByEntity(wmsInveClerkProtocol);
    }

    /**
     * @Title: updateWmsInveClerkDataStatus
     * @Description: 更新柜员业务表状态为已完成
     * @param wms_inve_transa_id 
     * @author: zhangyunfei
     * @time:2017年2月16日 上午9:15:51
     * history:
     * 1、2017年2月16日 Administrator 创建方法
     */
    private void updateWmsInveClerkDataStatus(Integer wms_inve_transa_id)
    {
        WmsInveClerkData wmsInveClerkData = new WmsInveClerkData();
        wmsInveClerkData.setWms_inve_transa_id(wms_inve_transa_id);
        // 单据状态为1 上单单据
        wmsInveClerkData.setIs_finished("1");
        wmsInveClerkData.setLast_update_timestamp(new Timestamp(System.currentTimeMillis()));
        // jinzhm 想2017-03-23修改
        wmsInveClerkDataDao.updateByTransaId(wmsInveClerkData);
        // wmsInveClerkDataDao.update(wmsInveClerkData);
    }

    /**
     * @Title: updateWmsInvetransaDateOfPaymentById
     * @Description: 根据上单主键更新date_of_payment和合同编码
     * @param begin_of_date
     * @param wms_inve_transa_id 
     * @author: zhangyunfei
     * @time:2017年2月16日 上午9:09:58
     * history:
     * 1、2017年2月16日 Administrator 创建方法
     */
    private void updateWmsInvetransaDateOfPaymentById(String begin_of_date, Integer wms_inve_transa_id)
    {
        WmsInveClerkProtocol wmsInveClerkProtocol = new WmsInveClerkProtocol();
        wmsInveClerkProtocol.setWms_inve_transa_id(wms_inve_transa_id);
        wmsInveClerkProtocol = wmsinveclerkprotocolDao.getWmsInveClerkProtocolByEntity(wmsInveClerkProtocol);
        WmsInveTransa wmsInveTransa = new WmsInveTransa();
        wmsInveTransa.setWms_inve_transa_id(wms_inve_transa_id);
        wmsInveTransa.setDate_of_payment(DateUtil.strToSqlDate(begin_of_date, null));
        if (wmsInveClerkProtocol != null)
        {
            wmsInveTransa.setFinancial_bill_code(wmsInveClerkProtocol.getProt_code());
        }
        wmsInveTransaDao.update(wmsInveTransa);

    }

    /**
     * @Title: SaveWmsInveClerkProtocol
     * @Description: 生成柜员合同  线下合同需要释放债权
     * @param wms_inve_transa_id
     * @param user 
     * @author: zhangyunfei
     * @time:2017年2月15日 下午7:14:50
     * history:
     * 1、2017年2月15日 Administrator 创建方法
     */
    private void saveWmsInveClerkProtocol(String begin_of_date, Integer wms_inve_transa_id, String protocol_type, String prot_code,
                                          UserBean user)
    {
        WmsInveClerkProtocol wmsInveClerkProtocol = new WmsInveClerkProtocol();

        // 线下合同释放债权
        if ("2".equals(protocol_type))
        {
            // 根据上单表主键查询返回柜员合同实体类 不带合同编号
            wmsInveClerkProtocol = wmsinveclerkprotocolDao.getWmsInveClerkProtocolByTransaIdWithoutCode(wms_inve_transa_id);
            // 线下合同协议编号
            wmsInveClerkProtocol.setProt_code(prot_code);
            // 是线下合同释放债权
            CreditBusiness.getInstance()
                          .releaseMatchedCreditForTransaFlow(wmsInveClerkProtocol.getWms_inve_transa_id(),
                                                             wmsInveClerkProtocol.getWms_inve_clerk_protocol_id(), user);
        }
        else
        {
            // 根据上单表主键查询返回柜员合同实体类 带合同编号
            wmsInveClerkProtocol = wmsinveclerkprotocolDao.getWmsInveClerkProtocolByTransaIdWithCode(wms_inve_transa_id);
        }
        // 1线上合同 2 线下合同  签约时把合同类型设置为null
        wmsInveClerkProtocol.setProtocol_type(protocol_type);
        wmsInveClerkProtocol.setBegin_of_date(DateUtil.strTimestamp(begin_of_date, null));
        // 补充协议合同到期日:合同签署日期+期限-1
        wmsInveClerkProtocol.setEnd_of_date(new Timestamp(DateUtil.getDateAddDays(DateUtil.getDatePlusMonths(wmsInveClerkProtocol.getBegin_of_date(), Integer.parseInt(wmsInveClerkProtocol.getProduct_deadline())), -1).getTime()));
        /*
         * wmsInveClerkProtocol.setAct_end_of_date(new Timestamp(DateUtil.getDateAddDays(DateUtil.getDatePlusMonths(wmsInveClerkProtocol.getBegin_of_date(), Integer.parseInt(wmsInveClerkProtocol.getProduct_deadline())), -1).getTime()));
        */
        wmsInveClerkProtocol.setCreate_user_id(user.getUserId());
        wmsInveClerkProtocol.setEnable_flag("1");
        wmsInveClerkProtocol.setCreate_timestamp(new Timestamp(System.currentTimeMillis()));
        wmsInveClerkProtocol.setLast_update_timestamp(new Timestamp(System.currentTimeMillis()));
        wmsinveclerkprotocolDao.save(wmsInveClerkProtocol);
        
        // 线上合同，更新债权匹配关系表的合同表主键、插入债权匹配历史表数据
        if ("1".equals(protocol_type))
        {
            Integer wms_inve_clerk_protocol_id = wmsInveClerkProtocol.getWms_inve_clerk_protocol_id();
            // 更新债权匹配关系表的合同表主键
            WmsInveTransaCrepkg crepkg = new WmsInveTransaCrepkg();
            crepkg.setWms_inve_transa_id(wms_inve_transa_id);
            crepkg.setWms_inve_clerk_protocol_id(wms_inve_clerk_protocol_id);
            // jinzhm 2017-03-21 添加， 生成合同同时，更新债权转让日期
            crepkg.setAcl_date(new java.sql.Date(DateUtil.strDate(begin_of_date, null).getTime()));
            int count = wmsInveTransaCrepkgDao.updateProtocol(crepkg);
            if (count > 0)
            {
                CreditBusiness.getInstance().recordHistory(wms_inve_transa_id, wms_inve_clerk_protocol_id, user);
            }
        }

    }

    /**
     * @Title: saveRedeemProtocol
     * @Description: 保存合同改签数据
     * @param transaId 上单主键
     * @param productAccount 投资金额（赎回时，如果没有打印合同的情况下多次进行赎回时，需要根据投资金额分辨合同）
     * @param user 登录用户
     * @return 合同主键
     * @author: jinzhm
     * @time:2017年2月17日 下午2:10:52
     * @see com.zx.emanage.inve.service.IWmsInveClerkProtocolService#saveRedeemProtocol(java.lang.Integer, com.zx.sframe.util.vo.UserBean)
     * history:
     * 1、2017年2月17日 jinzhm 创建方法
    */
    @Override
    @Transactional
    public String saveRedeemProtocol(Integer transaId, BigDecimal productAccount, UserBean user)
    {
        // 查询单据
        WmsInveTransa transa = wmsInveTransaDao.get(transaId);
        // 查询创建单据的人员信息
        PmPersonnel person = pmPersonnelDao.get(transa.getCreate_user_id());

        Map<String, Object> paramMap = new HashMap<String, Object>();
        paramMap.put("transaId", transaId);
        paramMap.put("productAccount", productAccount);
        // 查询协议信息
        WmsInveClerkProtocol protocol = wmsinveclerkprotocolDao.getWmsInveRedeemProtocolByTransaId(paramMap).get(0);

        // 更新合同编号
        paramMap = new HashMap<String, Object>();
        paramMap.put("protocolId", protocol.getWms_inve_clerk_protocol_id());
        paramMap.put("personnel_regionNumber", person.getPersonnel_regionnumber());
        paramMap.put("protocol_type", "1");
        paramMap.put("userId", user.getUserId());
        paramMap.put("lastUpdateTime", new Timestamp(System.currentTimeMillis()));
        wmsinveclerkprotocolDao.updateProtocolCode(paramMap);

        // 更新柜员业务数据
        updateClerkDataFinished(transaId, protocol.getWms_inve_redeem_id(), user);

        return protocol.getWms_inve_clerk_protocol_id().toString();
    }

    /**
     * @Title: saveExtendProtocol
     * @Description: 保存合同续签数据
     * @param transaId 上单主键
     * @param user 登录用户信息
     * @return 合同主键
     * @author: jinzhm
     * @time:2017年2月17日 下午3:32:12
     * @see com.zx.emanage.inve.service.IWmsInveClerkProtocolService#saveExtendProtocol(java.lang.Integer, com.zx.sframe.util.vo.UserBean)
     * history:
     * 1、2017年2月17日 jinzhm 创建方法
     */
    @Override
    @Transactional
    public String saveExtendProtocol(Integer transaId, UserBean user)
    {
        // 查询单据
        WmsInveTransa transa = wmsInveTransaDao.get(transaId);
        // 查询创建单据的人员信息
        PmPersonnel person = pmPersonnelDao.get(transa.getCreate_user_id());

        // 查询协议信息
        WmsInveClerkProtocol protocol = wmsinveclerkprotocolDao.getWmsInveExtendProtocolByTransaId(transaId).get(0);

        // 更新合同编号
        Map<String, Object> paramMap = new HashMap<String, Object>();
        paramMap.put("protocolId", protocol.getWms_inve_clerk_protocol_id());
        paramMap.put("personnel_regionNumber", person.getPersonnel_regionnumber());
        paramMap.put("last_update_user_id", user.getUserId());
        paramMap.put("last_update_timestamp", new Timestamp(System.currentTimeMillis()));
        paramMap.put("protocol_type", "1");
        wmsinveclerkprotocolDao.updateProtocolCode(paramMap);

        // 获取柜员业务表中该transaid最新的一条数据
        WmsInveClerkData clerkData = new WmsInveClerkData();
        clerkData.setWms_inve_transa_id(transaId);
        // 业务类型是续期单据
        clerkData.setData_type("2");
        clerkData = wmsInveClerkDataDao.getListByEntity(clerkData).get(0);
        // 修改柜员业务数据为已完成
        WmsInveClerkData updClerkData = new WmsInveClerkData();
        updClerkData.setWms_inve_clerk_data_id(clerkData.getWms_inve_clerk_data_id());
        updClerkData.setIs_finished("1");
        updClerkData.setLast_update_user_id(user.getUserId());
        updClerkData.setLast_update_timestamp(new Timestamp(System.currentTimeMillis()));
        wmsInveClerkDataDao.update(updClerkData);

        return protocol.getWms_inve_clerk_protocol_id().toString();
    }

    /**
     * @Title: updateClerkDataFinished
     * @Description: 更新柜员业务表数据为已完成
     * @param transaId 上单主键
     * @param redeemId 赎回主键
     * @param isOrderExtend 是否为预约续期
     * @author: jinzhm
     * @time:2017年2月17日 下午3:24:08
     * history:
     * 1、2017年2月17日 jinzhm 创建方法
     */
    private void updateClerkDataFinished(Integer transaId, Integer redeemId, UserBean user)
    {
        Map<String, Object> paramMap = new HashMap<String, Object>();
        paramMap.put("transaId", transaId);
        paramMap.put("redeemId", redeemId);
        paramMap.put("is_finished", "1");
        paramMap.put("enable_flag", "1");
        paramMap.put("userId", user.getUserId());
        paramMap.put("lastUpdateTime", new Timestamp(System.currentTimeMillis()));
        wmsInveClerkDataDao.updateClerkDataFinished(paramMap);
    }

    /**
     * @Title: saveExtendOrRedeemOfflineProtocol
     * @Description: 保存续签和改签线下补录合同信息
     * @param transaId 上单主键
     * @param productAccount 投资金额（赎回时，如果没有打印合同的情况下多次进行赎回时，需要根据投资金额分辨合同）
     * @param protocolCode 合同编号
     * @param type 业务类型 2：续期单据；3：赎回单据
     * @param user 登录用户信息
     * @author: jinzhm
     * @time:2017年2月17日 上午9:04:41
     * @see com.zx.emanage.inve.service.IWmsInveClerkProtocolService#saveExtendOrRedeemOfflineProtocol(java.lang.Integer, java.lang.String, com.zx.sframe.util.vo.UserBean)
     * history:
     * 1、2017年2月17日 jinzhm 创建方法
    */
    @Override
    @Transactional
    public void saveExtendOrRedeemOfflineProtocol(Integer transaId, BigDecimal productAccount, String protocolCode,
                                                  String type, UserBean user)
    {
        // 如果是续期单据
        if ("2".equals(type))
        {
            // 根据上单主键获得协议主键，续期时有可能有相同上单主键的协议信息
            WmsInveClerkProtocol protocol = wmsinveclerkprotocolDao.getWmsInveExtendProtocolByTransaId(transaId).get(0);

            // 更新合同编号
            WmsInveClerkProtocol updProtocol = new WmsInveClerkProtocol();
            updProtocol.setWms_inve_clerk_protocol_id(protocol.getWms_inve_clerk_protocol_id());
            updProtocol.setProt_code(protocolCode);
            // 设置为线下合同
            updProtocol.setProtocol_type("2");
            updProtocol.setLast_update_user_id(user.getUserId());
            updProtocol.setLast_update_timestamp(new Timestamp(System.currentTimeMillis()));
            // 修改合同信息
            wmsinveclerkprotocolDao.update(updProtocol);

            // 获取柜员业务表中该transaid最新的一条数据
            WmsInveClerkData clerkData = new WmsInveClerkData();
            clerkData.setWms_inve_transa_id(transaId);
            // 业务类型是续期单据
            clerkData.setData_type("2");
            clerkData = wmsInveClerkDataDao.getListByEntity(clerkData).get(0);
            // 修改柜员业务数据为已完成
            WmsInveClerkData updClerkData = new WmsInveClerkData();
            updClerkData.setWms_inve_clerk_data_id(clerkData.getWms_inve_clerk_data_id());
            updClerkData.setIs_finished("1");
            updClerkData.setLast_update_user_id(user.getUserId());
            updClerkData.setLast_update_timestamp(new Timestamp(System.currentTimeMillis()));
            wmsInveClerkDataDao.update(updClerkData);

            // 释放债权
            CreditBusiness.getInstance().disableMatchedCreditForExtendFlow(protocol.getWms_inve_transa_id(),
                                                                           protocol.getWms_inve_clerk_protocol_id(),
                                                                           user);
            // 删除匹配历史
            CreditBusiness.getInstance().deleteCreditMatchHistory(protocol.getWms_inve_transa_id(),
                                                                  protocol.getWms_inve_clerk_protocol_id(), user);
        }
        // 如果是赎回单据
        else
        {
            Map<String, Object> paramMap = new HashMap<String, Object>();
            paramMap.put("transaId", transaId);
            paramMap.put("productAccount", productAccount);
            WmsInveClerkProtocol protocol = wmsinveclerkprotocolDao.getWmsInveRedeemProtocolByTransaId(paramMap).get(0);
            // 更新合同编号
            WmsInveClerkProtocol updProtocol = new WmsInveClerkProtocol();
            updProtocol.setWms_inve_clerk_protocol_id(protocol.getWms_inve_clerk_protocol_id());
            updProtocol.setProt_code(protocolCode);
            // 设置为线下合同
            updProtocol.setProtocol_type("2");
            updProtocol.setLast_update_user_id(user.getUserId());
            updProtocol.setLast_update_timestamp(new Timestamp(System.currentTimeMillis()));
            // 修改合同信息
            wmsinveclerkprotocolDao.update(updProtocol);

            // 修改柜员业务数据为已完成
            updateClerkDataFinished(transaId, protocol.getWms_inve_redeem_id(), user);
            // 释放债权
            CreditBusiness.getInstance().disableMatchedCreditForRedeemFlow(protocol.getWms_inve_transa_id(),
                                                                           protocol.getWms_inve_clerk_protocol_id(),
                                                                           user);
            // 删除匹配历史
            CreditBusiness.getInstance().deleteCreditMatchHistory(protocol.getWms_inve_transa_id(),
                                                                  protocol.getWms_inve_clerk_protocol_id(), user);
        }
    }

    /**
     * @Title: saveWmsInveClerkProtocolRedeem
     * @Description: 预约部分赎回 生成柜员合同
     * @param wms_inve_clerk_protocol_id 
     * @author: zhangyunfei
     * @time:2017年2月16日 下午1:21:40
     * history:
     * 1、2017年2月16日 Administrator 创建方法
     */
    @Override
    public void saveWmsInveClerkProtocolRedeem(WmsInveRedeem wmsInveRedeem, WmsInveRedeemDetail wmsInveRedeemDetail,
                                               UserBean user)
    {
        WmsInveClerkProtocol wmsInveClerkProtocol = new WmsInveClerkProtocol();
        wmsInveClerkProtocol.setWms_inve_transa_id(wmsInveRedeemDetail.getWms_inve_transa_id());
        List<WmsInveClerkProtocol> wmsinveclerkprotocolList = wmsinveclerkprotocolDao.getListByWmsInveClerkProtocol(wmsInveClerkProtocol);
        // 柜员协议表为空 需要从新生成合同
        if (wmsinveclerkprotocolList.size() > 0)
        {
            wmsInveClerkProtocol = wmsinveclerkprotocolList.get(0);
        }
        else
        {
            // 当柜员协议表中不存在时 查询原协议表 取出end_of_date
            WmsInveTransaProtocol protocol = new WmsInveTransaProtocol();
            protocol.setWms_inve_transa_id(wmsInveRedeemDetail.getWms_inve_transa_id());
            List<WmsInveTransaProtocol> protocolList = wmsInveTransaProtocolDao.getListByEntity(protocol);
            // 生成不带合同编号的 合同实体类
            wmsInveClerkProtocol = wmsinveclerkprotocolDao.getWmsInveClerkProtocolByTransaIdWithoutCode(wmsInveRedeemDetail.getWms_inve_transa_id());
            wmsInveClerkProtocol.setEnd_of_date(new Timestamp(protocolList.get(0).getEnd_of_date().getTime()));// 结束日期
        }

        // 赎回生成新合同 合同主键设置为null
        wmsInveClerkProtocol.setAct_end_of_date(null);
        wmsInveClerkProtocol.setWms_inve_clerk_protocol_id(null);
        wmsInveClerkProtocol.setProduct_account(wmsInveClerkProtocol.getProduct_account()
                                                                    .subtract(wmsInveRedeemDetail.getRedeem_amount()));
        // 投资金额小写转大写
        wmsInveClerkProtocol.setProduct_account_upper(digitUpperUtil.digitUppercase(((BigDecimal) wmsInveClerkProtocol.getProduct_account()).doubleValue(), true).replaceAll("万元", ""));
        wmsInveClerkProtocol.setWms_inve_redeem_id(wmsInveRedeem.getWms_inve_redeem_id());
        wmsInveClerkProtocol.setCreate_user_id(user.getUserId());
        wmsInveClerkProtocol.setCreate_user_name(user.getRealname());
        wmsInveClerkProtocol.setCreate_timestamp(new Timestamp(new Date().getTime()));
        wmsInveClerkProtocol.setLast_update_timestamp(new Timestamp(new Date().getTime()));
        // 赎回时生成不带协议编号的合同
        wmsInveClerkProtocol.setProt_code(null);
        wmsInveClerkProtocol.setProtocol_type(null);
        wmsInveClerkProtocol.setEnable_flag("1");
        wmsinveclerkprotocolDao.save(wmsInveClerkProtocol);
        // 预约部分赎回匹配债权
        // WmsInveTransaProd wmsInveTransaProd =
        // wmsInveTransaProdDao.get(wmsInveRedeemDetail.getWms_inve_transa_prod_id());

        // 封装柜员业务表实体类
        WmsInveClerkData wmsInveClerkData = wmsInveClerkDataDao.getWmsInveClerkDataByWmsInveTransaId(wmsInveRedeemDetail.getWms_inve_transa_id());
        wmsInveClerkData.setWms_inve_redeem_id(wmsInveRedeem.getWms_inve_redeem_id());
        wmsInveClerkData.setData_type("3");
        wmsInveClerkData.setProduct_account(wmsInveClerkProtocol.getProduct_account());
        wmsInveClerkData.setOper_timestamp(new Timestamp(System.currentTimeMillis()));
        wmsInveClerkData.setSort_timestamp(new Timestamp(System.currentTimeMillis()));
        wmsInveClerkData.setIs_finished("0");
        wmsInveClerkData.setCreate_user_id(user.getUserId());
        wmsInveClerkData.setCreate_user_name(user.getRealname());
        wmsInveClerkData.setCreate_user_dept_id(user.getDeptId());
        wmsInveClerkData.setCreate_timestamp(new Timestamp(System.currentTimeMillis()));

        wmsInveClerkData.setEnable_flag("1");

        wmsInveClerkDataDao.save(wmsInveClerkData);

    }

    /**
     * @Title: updateWmsInveClerkProtocolRedeem
     * @Description: 赎回退回时  修订 需要更新柜员协议表金额和enable_flag
     * @param wmsInveRedeem
     * @param wmsInveRedeemDetail
     * @param user 
     * @author: zhangyunfei
     * @time:2017年2月16日 下午6:11:01
     * history:
     * 1、2017年2月16日 Administrator 创建方法
     */
    @Override
    public void updateWmsInveClerkProtocolRedeem(WmsInveClerkProtocol protocol, WmsInveRedeem wmsInveRedeem, WmsInveRedeemDetail wmsInveRedeemDetail,
                                                 UserBean user)
    {
        WmsInveClerkProtocol wmsInveClerkProtocol = new WmsInveClerkProtocol();
        // 更新柜员协议表单据状态和金额
        wmsInveClerkProtocol.setProduct_account(protocol.getProduct_account().subtract(wmsInveRedeemDetail.getRedeem_amount()));
        wmsInveClerkProtocol.setProduct_account_upper(digitUpperUtil.digitUppercase(((BigDecimal) wmsInveClerkProtocol.getProduct_account()).doubleValue(), true).replaceAll("万元", ""));

        wmsInveClerkProtocol.setEnable_flag("1");
        wmsInveClerkProtocol.setWms_inve_transa_id(wmsInveRedeemDetail.getWms_inve_transa_id());
        wmsInveClerkProtocol.setWms_inve_redeem_id(wmsInveRedeem.getWms_inve_redeem_id());
        wmsinveclerkprotocolDao.disableWmsinveclerkprotocol(wmsInveClerkProtocol);

    }

    /**
     * 
     * @Title: saveWmsInveClerkData
     * @Description: 赎回退回修订时保存柜员业务单据
     * @param protocol
     * @param wmsInveRedeem
     * @param wmsInveRedeemDetail
     * @param user 
     * @author: zhangyunfei
     * @time:2017年2月22日 上午10:19:42
     * history:
     * 1、2017年2月22日 Administrator 创建方法
     */
    @Override
    public void saveWmsInveClerkData(WmsInveClerkProtocol protocol, WmsInveRedeem wmsInveRedeem, WmsInveRedeemDetail wmsInveRedeemDetail, UserBean user)
    {
        // 封装柜员业务表实体类
        // 生成柜员业务单据
        WmsInveClerkData wmsInveClerkData = wmsInveClerkDataDao.getWmsInveClerkDataByWmsInveTransaId(wmsInveRedeemDetail.getWms_inve_transa_id());
        wmsInveClerkData.setWms_inve_redeem_id(wmsInveRedeem.getWms_inve_redeem_id());

        // 3是赎回单据
        wmsInveClerkData.setData_type("3");
        wmsInveClerkData.setProduct_account(protocol.getProduct_account().subtract(wmsInveRedeemDetail.getRedeem_amount()));

        wmsInveClerkData.setOper_timestamp(new Timestamp(System.currentTimeMillis()));
        wmsInveClerkData.setSort_timestamp(new Timestamp(System.currentTimeMillis()));
        wmsInveClerkData.setIs_finished("0");
        wmsInveClerkData.setCreate_user_id(user.getUserId());
        wmsInveClerkData.setCreate_user_name(user.getRealname());
        wmsInveClerkData.setCreate_user_dept_id(user.getDeptId());
        wmsInveClerkData.setCreate_timestamp(new Timestamp(System.currentTimeMillis()));

        wmsInveClerkData.setEnable_flag("1");

        wmsInveClerkDataDao.save(wmsInveClerkData);
    }

    /**
     * 
     * @Title: enableWmsInveClerkProtocolRedeem
     * @Description: 失效柜员协议 和柜员业务单据
     * @author: zhangyunfei
     * @time:2017年2月17日 上午9:03:48
     * history:
     * 1、2017年2月17日 Administrator 创建方法
     */
    public void disableWmsInveClerkProtocol(Integer wms_inve_redeem_id)
    {
        // 失效柜员协议表单据
        WmsInveClerkProtocol wmsInveClerkProtocol = new WmsInveClerkProtocol();
        wmsInveClerkProtocol.setWms_inve_redeem_id(wms_inve_redeem_id);
        // 预约赎回 获取主键最大的原单据 wmsinveclerkprotocol.get(0)
        wmsInveClerkProtocol.setEnable_flag("0");
        wmsinveclerkprotocolDao.disableWmsinveclerkprotocol(wmsInveClerkProtocol);

        // 失效柜员业务表单据
        WmsInveClerkData wmsInveClerkData = new WmsInveClerkData();
        wmsInveClerkData.setEnable_flag("0");
        wmsInveClerkData.setWms_inve_redeem_id(wms_inve_redeem_id);
        wmsInveClerkDataDao.disableWmsInveClerkData(wmsInveClerkData);

    }


    /**
     * @Title: getOrderRedeemClerkProtocol
     * @Description:  查询到达预约赎回日的柜员协议集合并匹配债权
     * @param date
     * @return 
     * @author: zhangyunfei
     * @time:2017年2月17日 下午4:39:23
     * @see com.zx.emanage.inve.service.IWmsInveClerkProtocolService#getOrderRedeemClerkProtocol(java.lang.String)
     * history:
     * 1、2017年2月17日 Administrator 创建方法
    */
    @Override
    public String matchForOrderRedeemClerkProtocol(String date)
    {
        UserBean user = new UserBean();
        user.setUserId(113);

        // 查询到达预约赎回日的柜员协议集合 遍历匹配债权(预约部分赎回的单据)
        List<WmsInveClerkProtocolVO> WmsInveClerkProtocolVoList = wmsInveClerkDataDao.getOrderRedeemClerkProtocol(date);
        for (int i = 0; i < WmsInveClerkProtocolVoList.size(); i++)
        {
            // 非股东单据(匹配债权 发送邮件)
            if (wmsInveTransaService.verifyIsShareholderBill(WmsInveClerkProtocolVoList.get(i).getWms_inve_transa_id()))
            {
                CreditBusiness.getInstance().matchForRedeemFlow(WmsInveClerkProtocolVoList.get(i).getWms_inve_transa_id(), WmsInveClerkProtocolVoList.get(i).getWms_inve_clerk_protocol_id(), WmsInveClerkProtocolVoList.get(i).getWms_inve_pruduct_category_id(), WmsInveClerkProtocolVoList.get(i).getProduct_account(), WmsInveClerkProtocolVoList.get(i).getRedeem_date(), user);
                // 预约部分赎回选择电子债权则进行发送邮件
                if ("2".equals(WmsInveClerkProtocolVoList.get(i).getGet_credit_type()))
                {
                    saveWmsInveCreditEmailInfo(WmsInveClerkProtocolVoList.get(i).getWms_inve_transa_id(), WmsInveClerkProtocolVoList.get(i).getWms_inve_clerk_protocol_id(), WmsInveClerkProtocolVoList.get(i).getProt_code(), user);
                }
            }
        }
        return "success";
    }

    /**
     * 
     * @Title: saveWmsInveCreditEmailInfo
     * @Description: 生成债权邮件信息
     * @param old_wms_inve_transa_id
     * @param new_wms_inve_transa_id
     * @param oldWmsInveClerkProtocol
     * @param user
     * @return 
     * @author: zhangyunfei
     * @time:2017年3月22日 上午10:40:44
     * history:
     * 1、2017年3月22日 Administrator 创建方法
     */
    private void saveWmsInveCreditEmailInfo(Integer wms_inve_transa_id, Integer wms_inve_clerk_protocol_id, String prot_code, UserBean user)
    {

        // 定义邮件对象
        WmsInveCreditEmail wmsInveCreditEmail = new WmsInveCreditEmail();

        // 设置续期生成的新单据的上单表主键
        wmsInveCreditEmail.setWms_inve_transa_id(wms_inve_transa_id);

        // 设置邮件标题
        wmsInveCreditEmail.setEmail_subject("卓信金控《债权转让及受让协议》已发送，请查收_【自动发送，请勿回复】");

        // 设置柜员协议表主键
        wmsInveCreditEmail.setWms_inve_clerk_protocol_id(wms_inve_clerk_protocol_id);

        // 设置邮件内容
        wmsInveCreditEmail.setEmail_content("尊敬的客户，您好！您所持有的【" + prot_code + "】理财合同所对应的《债权转让及受让协议》和《内部债权转让及受让协议》已匹配完成，请注意查收！谢谢！");

        // 设置邮件发送状态为未发送状态
        wmsInveCreditEmail.setSend_status("0");

        // 设置邮件是否有效标识
        wmsInveCreditEmail.setEnable_flag("1");

        // 设置类型
        wmsInveCreditEmail.setData_type("2");

        // 设置创建时间
        wmsInveCreditEmail.setCreate_timestamp(new Timestamp(System.currentTimeMillis()));

        // 设置创建人
        wmsInveCreditEmail.setCreate_user_id(user.getUserId());

        // 保存邮件发送信息
        wmsInveCreditEmailDao.save(wmsInveCreditEmail);

    }

    /**
     * @Title: updatePreWmsInveClerkProtocolEndOfDate
     * @Description: 更新原单据到期日 释放原合同债权
     * @param wmsInveClerkProtocol 
     * @author: zhangyunfei
     * @time:2017年2月17日 下午6:10:22
     * @see com.zx.emanage.inve.service.IWmsInveClerkProtocolService#updatePreWmsInveClerkProtocolEndOfDate(com.zx.emanage.util.gen.entity.WmsInveClerkProtocol)
     * history:
     * 1、2017年2月17日 Administrator 创建方法
    */
    @Override
    public void updatePreWmsInveClerkProtocolEndOfDate(WmsInveClerkProtocol wmsInveClerkProtocol)
    {
        wmsinveclerkprotocolDao.updatePreWmsInveClerkProtocolEndOfDate(wmsInveClerkProtocol);
    }

    /**
     * @Title: getWmsInveClaimsInfos
     * @Description: 根据上单表主键和柜员协议表主键获取债权匹配信息
     * @param wms_inve_transa_id 上单表主键
     * @param wms_inve_clerk_protocol_id 柜员协议表主键
     * @return 
     * @author: DongHao
     * @time:2017年2月17日 下午6:33:52
     * @see com.zx.emanage.inve.service.IWmsInveClerkProtocolService#getWmsInveClaimsInfos(java.lang.String, java.lang.String)
     * history:
     * 1、2017年2月17日 DongHao 创建方法
    */
    @Override
    public Map<String, Object> getWmsInveClaimsInfos(String wms_inve_transa_id, String wms_inve_clerk_protocol_id)
    {
        Map<String, Object> resultMap = new HashMap<String, Object>();

        Map<String, Object> paramsMap = new HashMap<String, Object>();
        paramsMap.put("wms_inve_transa_id", wms_inve_transa_id);
        paramsMap.put("wms_inve_clerk_protocol_id", wms_inve_clerk_protocol_id);

        List<Map<String, Object>> list = wmsinveclerkprotocolDao.getWmsInveClaimsInfos(paramsMap);

        resultMap.put("Rows", list);
        return resultMap;
    }

    /**
     * 
     * @Title: deleteClerkDataAndClerkProtocol
     * @Description: 赎回操作时需要删除掉预约续期的协议表和柜员业务表数据
     * @param wms_inve_transa_id 
     * @author: DongHao
     * @time:2017年2月17日 下午5:41:26
     * history:
     * 1、2017年2月17日 DongHao 创建方法
     */
    public void deleteClerkDataAndClerkProtocol(Integer wms_inve_transa_id)
    {

        WmsInveClerkData data = new WmsInveClerkData();
        data.setWms_inve_transa_id(wms_inve_transa_id);
        data.setData_type("2");
        data.setEnable_flag("0");
        wmsInveClerkDataDao.deleteClerkDataByWmsInveTransaIdAndDataType(data);

        WmsInveClerkProtocol protocol = new WmsInveClerkProtocol();
        protocol.setWms_inve_transa_id(wms_inve_transa_id);
        protocol.setIs_order_extend("1");
        protocol.setEnable_flag("0");
        wmsinveclerkprotocolDao.deleteClerkProtocolByWmsInveTransaIdAndIsOrderExtend(protocol);
    }

    /**
     * @Title: exportProtocolpdf
     * @Description: 预约部分赎回/预约续期  定时任务下载合同
     * @param wmsInveClerkProtocolSearchBeanVO 
     * @author: zhangyunfei
     * @time:2017年3月10日 下午5:01:38
     * history:
     * 1、2017年3月10日 Administrator 创建方法
     */
    public List<Map<String, String>> exportProtocolpdf(WmsInveClerkProtocolSearchBeanVO wmsInveClerkProtocolSearchBeanVO)
    {

        List<Map<String, String>> res_list = new ArrayList<Map<String, String>>();

        List<String> listUrl = new ArrayList<String>();
        listUrl.add("内部转让债权协议.jasper");
        listUrl.add("多对多债权转让及受让协议.jasper");

        String baseDir = WmsInveClerkProtocolController.class.getResource("/").getPath();
        String header1Dir = baseDir + "jasper/header1.png";
        String logoDir = baseDir + "jasper/logo_zx.jpg";

        // pMap 存放人出借咨询与服务协议、委托代扣款授权书、债权包签收声明、个人出借咨询与服务补充协议所需参数
        // wmsInveClerkProtocolSearchBeanVO.setWms_inve_transa_id(5);
        Map<String, Object> pMap = getWmsInveClerkProtocolById(wmsInveClerkProtocolSearchBeanVO);
        // 拼接页脚字符串
        String footInfo = "Add：" + pMap.get("r_b_area") + "  TEL：400 000 2555  Web：www.zxptp.com";
        // zMap 存放内部转让债权协议所需参数
        Map<String, Object> zMap = new HashMap<String, Object>();
        // cMap 存放债权转让受让协议所需参数
        Map<String, Object> cMap = new HashMap<String, Object>();

        // 根据上单主键和协议主键查找所有关联的债权信息
        List<Map<String, Object>> transaCrepkgList = wmsInveTransaCrepkgService.getAllTransaCrepkgByGroup(wmsInveClerkProtocolSearchBeanVO);
        Map<String, List<Map<String, Object>>> crepkgMap = wmsInveTransaCrepkgService.groupTransaCrepkgList(transaCrepkgList);

        String fileurl = "";
        List<JasperPrint> jasperPrintList = new ArrayList<JasperPrint>();
        List<JasperPrint> jasperPrintList_out = new ArrayList<JasperPrint>();
        JasperPrint jasperPrint = null;
        try
        {
            for (int i = 0; i < listUrl.size(); i++)
            {
                fileurl = JasperUtil.class.getClassLoader().getResource("").getPath() + "/jasper/" + listUrl.get(i);
                File file = new File(fileurl);
                InputStream jr = new FileInputStream(file);
                JasperReport jasperReport = (JasperReport) JRLoader.loadObject(jr);
                jasperReport.getFields();
                // 内部转让协议需要根据他项人id多次封装jasperPrint(打印多张合同)
                if ("内部转让债权协议.jasper".equals(listUrl.get(i)))
                {
                    // 转让协议编号
                    zMap.put("trans_code", pMap.get("trans_code"));
                    zMap.put("header1Dir", header1Dir);

                    for (Map.Entry<String, List<Map<String, Object>>> entry : crepkgMap.entrySet())
                    {
                        // 当他项人为赵燕国时 不签内转内合同
                        if (!"赵燕国".equals(entry.getKey()))
                        {
                            // cList为债权集合
                            String intran_a_name = (String) entry.getValue().get(0).get("intran_a_name");
                            zMap.put("tList", entry.getValue());
                            zMap.put("b_address", pMap.get("b_address"));
                            zMap.put("sign_place_postcode", pMap.get("sign_place_postcode"));
                            zMap.put("intran_a_name", entry.getValue().get(0).get("intran_a_name"));
                            zMap.put("intran_a_id", entry.getValue().get(0).get("intran_a_id"));
                            zMap.put("intran_b_name", pMap.get("intran_name"));
                            zMap.put("intran_b_address", pMap.get("intran_address"));
                            zMap.put("intran_b_id", pMap.get("intran_id"));
                            zMap.put("prot_code", pMap.get("prot_code"));
                            zMap.put("logoDir", logoDir);
                            zMap.put("sign_date", pMap.get("sign_date"));
                            zMap.put("signDir", baseDir + "jasper/" + intran_a_name + ".png");
                            zMap.put("signDir_b", baseDir + "jasper/" + pMap.get("intran_name") + ".png");
                            // 经办人-----业务员
                            zMap.put("salesman_name", pMap.get("salesman_name"));
                            zMap.put("salesman_shortCode", pMap.get("salesman_shortCode"));
                            // 经办人-----业务员
                            zMap.put("printman_shortCode", pMap.get("create_user_shortCode"));
                            // 他项人为组织 甲方取组织名称
                            zMap.put("a_company_name", entry.getValue().get(0).get("a_company_name"));
                            // 组织标示 0非组织 1组织
                            zMap.put("is_company", entry.getValue().get(0).get("is_company"));
                            // 页脚说明
                            zMap.put("footInfo", footInfo);
                            jasperPrint = JasperFillManager.fillReport(jasperReport, zMap, new JREmptyDataSource());
                            int page_size = jasperPrint.getPages().size();
                            jasperPrintList.add(jasperPrint);

                            // 添加空白页
                            if (page_size % 2 == 1)
                            {
                                String blank_fileurl = JasperUtil.class.getClassLoader().getResource("").getPath() + "/jasper/" + "blank.jasper";
                                File blank_file = new File(blank_fileurl);
                                InputStream blank_jr = new FileInputStream(blank_file);
                                JasperReport blank_jasperReport = (JasperReport) JRLoader.loadObject(blank_jr);
                                JasperPrint blank_jasperPrint = JasperFillManager.fillReport(blank_jasperReport, zMap, new JREmptyDataSource());
                                jasperPrintList.add(blank_jasperPrint);
                            }

                        }
                    }
                }
                // 封装多对多债权转让受让协议所需参数
                else if ("多对多债权转让及受让协议.jasper".equals(listUrl.get(i)))
                {
                    // 转让协议编号
                    cMap.put("sign_place_postcode", pMap.get("sign_place_postcode"));
                    cMap.put("a_contact_address", pMap.get("a_contact_address"));
                    cMap.put("a_id_card", pMap.get("a_id_card"));
                    cMap.put("a_name", pMap.get("a_name"));
                    cMap.put("intran_id", pMap.get("intran_id"));
                    cMap.put("intran_name", pMap.get("intran_name"));
                    cMap.put("prot_code", pMap.get("prot_code"));
                    cMap.put("logoDir", logoDir);

                    cMap.put("category_name", pMap.get("category_name"));
                    cMap.put("trans_code", pMap.get("trans_code"));
                    cMap.put("begin_of_date", pMap.get("begin_of_date"));
                    cMap.put("card_no", pMap.get("card_no"));
                    cMap.put("bank_info", pMap.get("bank_info"));
                    cMap.put("sum_cre_pledge_mon", pMap.get("sum_cre_pledge_mon"));
                    cMap.put("sum_cre_pledge_mon_upper", pMap.get("sum_cre_pledge_mon_upper"));

                    cMap.put("signDir_b", baseDir + "jasper/" + pMap.get("intran_name") + ".png");
                    // 经办人-----业务员
                    cMap.put("salesman_name", pMap.get("salesman_name"));
                    cMap.put("salesman_shortCode", pMap.get("salesman_shortCode"));
                    // 审核人-----当前登录人 打印人
                    cMap.put("printman_shortCode", pMap.get("create_user_shortCode"));
                    // 页脚说明
                    cMap.put("footInfo", footInfo);
                    // 3.1/6.1/6.2项文字说明
                    cMap.put("3.1Info", "       3.1 转让价款：乙方向甲方支付人民币(大写)" + pMap.get("sum_cre_pledge_mon_upper") + " 元整(人民币小写" + pMap.get("sum_cre_pledge_mon") + "元)作为上述债权转让的对价。");
                    cMap.put("6.1Info", "       6.1双方同意" + pMap.get("r_b_name") + "作为本协议签订的见证人。");
                    cMap.put("6.2Info", "       6.2乙方同意委托" + pMap.get("r_b_name") + "对其受让债权进行信用咨询和管理服务。乙方与" + pMap.get("r_b_name") + "另行签订《个人出借与咨询服务协议》。");
                    // 证明人
                    cMap.put("r_b_name", pMap.get("r_b_name"));
                    cMap.put("header1Dir", header1Dir);
                    cMap.put("tList", transaCrepkgList);

                    jasperPrint = JasperFillManager.fillReport(jasperReport, cMap, new JREmptyDataSource());

                    int page_size = jasperPrint.getPages().size();
                    jasperPrintList_out.add(jasperPrint);

                    // 添加空白页
                    if (page_size % 2 == 1)
                    {
                        String blank_fileurl = JasperUtil.class.getClassLoader().getResource("").getPath() + "/jasper/" + "blank.jasper";
                        File blank_file = new File(blank_fileurl);
                        InputStream blank_jr = new FileInputStream(blank_file);
                        JasperReport blank_jasperReport = (JasperReport) JRLoader.loadObject(blank_jr);
                        JasperPrint blank_jasperPrint = JasperFillManager.fillReport(blank_jasperReport, zMap, new JREmptyDataSource());
                        jasperPrintList_out.add(blank_jasperPrint);
                    }
                }
            }
            // 导出pdf格式合同
            Map<String, String> res_file_map1 = JasperUtil.doExport(jasperPrintList, "内部转让债权协议.pdf", wmsInveClerkProtocolSearchBeanVO.getBill_code());
            res_list.add(res_file_map1);
            Map<String, String> res_file_map2 = JasperUtil.doExport(jasperPrintList_out, "债权转让及受让协议.pdf",
                                                                    wmsInveClerkProtocolSearchBeanVO.getBill_code());
            res_list.add(res_file_map2);
        }
        catch (Exception e)
        {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return res_list;
    }

    /**
     * @Title: getClerkProtocolByWmsInveTransaId
     * @Description: 根据上单表主键获取柜员协议信息
     * @param wms_inve_transa_id 上单表主键
     * @return 返回柜员协议信息
     * @author: DongHao
     * @time:2017年3月22日 上午10:05:08
     * @see com.zx.emanage.inve.service.IWmsInveClerkProtocolService#getClerkProtocolByWmsInveTransaId(java.lang.Integer)
     * history:
     * 1、2017年3月22日 DongHao 创建方法
    */
    @Override
    public WmsInveClerkProtocol getClerkProtocolByWmsInveTransaId(Integer wms_inve_transa_id)
    {
        return wmsinveclerkprotocolDao.getClerkProtocolByWmsInveTransaId(wms_inve_transa_id);
    }
}
