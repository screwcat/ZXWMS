package com.zx.emanage.remind.service.impl;import java.sql.Timestamp;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import org.apache.commons.lang3.StringUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import com.alibaba.fastjson.JSON;import com.google.gson.Gson;import com.zx.emanage.remind.persist.WmsCreCreditNotaryWarnDao;import com.zx.emanage.remind.persist.WmsCreCreditSendMessageLogDao;import com.zx.emanage.remind.service.IWmsCreCreditSendMessageLogService;import com.zx.emanage.remind.vo.WmsCreCreditSendMessageLogSearchBeanVO;import com.zx.emanage.util.gen.entity.WmsCreCreditNotaryWarn;import com.zx.emanage.util.gen.entity.WmsCreCreditSendMessageLog;import com.zx.platform.syscontext.vo.GridDataBean;import com.zx.sframe.util.SysUtil;import com.zx.sframe.util.vo.UserBean;/** * @ClassName: WmsCreCreditSendMessageLogServiceImpl * @Description: 内容摘要：发送消息日志表 * @author baisong * @date 2016年11月22日 * @version V1.0 * history: * 1、2016年11月22日 baisong 创建文件 */@Service("WmsCreCreditSendMessageLogService")public class WmsCreCreditSendMessageLogServiceImpl implements IWmsCreCreditSendMessageLogService {    private static Logger log = LoggerFactory.getLogger(WmsCreCreditSendMessageLogServiceImpl.class);    @Autowired    private WmsCreCreditSendMessageLogDao wmscrecreditsendmessagelogDao;        @Autowired    private WmsCreCreditNotaryWarnDao wmsCreCreditNotaryWarnDao;    /**     * Description : 查询列表(不带分页)     *      * @param queryInfo     * @return record list     * @author administrator     */    @Override    public Map<String, Object> getListWithoutPaging(WmsCreCreditSendMessageLogSearchBeanVO queryInfo) {        Map<String, Object> paramMap = new HashMap<String, Object>();        paramMap.put("sortname", queryInfo.getSortname());        paramMap.put("sortorder", queryInfo.getSortorder());        List<Map<String, Object>> list = wmscrecreditsendmessagelogDao.search(paramMap);        Map<String, Object> resMap = new HashMap<String, Object>();        resMap.put("Rows", list);        return resMap;    }    /**     * Description : 查询列表(带分页)     *      * @param queryInfo     * @return record list     * @author administrator     */    @Override    public Map<String, Object> getListWithPaging(WmsCreCreditSendMessageLogSearchBeanVO queryInfo) {        Map<String, Object> paramMap = new HashMap<String, Object>();        paramMap.put("sortname", queryInfo.getSortname());        paramMap.put("sortorder", queryInfo.getSortorder());        paramMap.put("pagesize", queryInfo.getPagesize());        paramMap.put("offset", queryInfo.getOffset());        List<Map<String, Object>> list = wmscrecreditsendmessagelogDao.search(paramMap);        GridDataBean<Map<String, Object>> bean =             new GridDataBean<Map<String, Object>>(queryInfo.getPage(), wmscrecreditsendmessagelogDao.findCount(paramMap), list);        return bean.getGridData();    }    /**     * Description : 根据主键查询     *      * @param primary key     * @return WmsCreCreditSendMessageLog     * @author administrator     */    @Override    public WmsCreCreditSendMessageLog getInfoByPK(Integer wms_cre_credit_send_message_log_id) {        return wmscrecreditsendmessagelogDao.get(wms_cre_credit_send_message_log_id);    }    /**     * Description :新增     *      * @param bean     * @return "success" or "error" or user defined     * @author administrator     */    @Override    @Transactional    public String save(WmsCreCreditSendMessageLog bean, UserBean user) {        String resStr = "success";        int ret = 0;        ret = wmscrecreditsendmessagelogDao.save(bean);        if (ret == 0) {            resStr = "error";        }        return resStr;    }    /**     * Description : 修改     *      * @param bean contains pk at least     * @return "success" or "error" or user defined     * @author administrator     */    @Override    @Transactional    public String update(WmsCreCreditSendMessageLog bean, UserBean user) {        String resStr = "success";        int ret = 0;        ret = wmscrecreditsendmessagelogDao.update(bean); // update a record replace columns,                                                   // nonsupport null val        if (ret == 0) {            resStr = "error";        }        return resStr;    }    /**     * Description : è·åList<WmsCreCreditSendMessageLog>ç»æé     *      * @param queryInfo     * @param isExludePKFlag, true is exclude primary key, false is include     *            primary key     * @return "success" or "repeat"     * @author administrator     */    private List<WmsCreCreditSendMessageLog> getListByEntity(WmsCreCreditSendMessageLog queryInfo, Boolean isExcludePKFlag) {        Map<String, Object> paramMap = new HashMap<String, Object>();        paramMap.put("isExcludePKFlag", isExcludePKFlag);        String resStr = "success";        List<WmsCreCreditSendMessageLog> beanList = wmscrecreditsendmessagelogDao.getListByEntity(queryInfo);        return beanList;    }    	/**	 * 	 * @Title: sendMessageBirthday	 * @Description: (生日发送祝福短信息数量)	 * @param request	 * @param bean	 * @return	 * @author: baisong	 * @time:2016年11月15日 下午1:30:40 history: 1、2016年11月15日 baisong 创建方法	 */	@Override	public String sendMessageBirthdayCount(			WmsCreCreditSendMessageLogSearchBeanVO bean,			UserBean user) {		Map<String, Object> map = new HashMap<>();		map.put("wms_cre_credit_notary_warn_id_list",				bean.getWms_cre_credit_notary_warn_id_list());		List<Map<String, Object>> list = wmscrecreditsendmessagelogDao				.sendMessageBirthdayCount(map);		String count = "0";		if (list != null) {			count = list.size() + "";		}		return count;	}	/**	 * 	 * @Title: sendMessageBirthday	 * @Description: (生日发送祝福短信息)	 * @param request	 * @param bean	 * @return	 * @author: baisong	 * @time:2016年11月15日 下午1:30:40 history: 1、2016年11月15日 baisong 创建方法	 */	@Override	@Transactional	public String sendMessageBirthday(			WmsCreCreditSendMessageLogSearchBeanVO bean,			UserBean user) {		String resStr = "success";		int ret = 0;		String tpl_id = "2117";// 短信模板id		Map<String, Object> map = new HashMap<>();		map.put("wms_cre_credit_notary_warn_id_list",				bean.getWms_cre_credit_notary_warn_id_list());		List<Map<String, Object>> list = wmscrecreditsendmessagelogDao				.sendMessageBirthdayCount(map);		if (list == null || list.size() == 0) {			resStr = "error";			return resStr;		}		List<WmsCreCreditSendMessageLog> listLog = new ArrayList<>();		Map<String, String> sendJson=new HashMap<>();		sendJson.put("tpl_id", tpl_id);//短信模板id		Gson gson=new Gson();		Timestamp datetime = new Timestamp(System.currentTimeMillis());// 当前时间		for(Map<String, Object> sendmap:list){			WmsCreCreditSendMessageLog log = new WmsCreCreditSendMessageLog();			if(sendmap!=null){				String []send_message_number=sendmap.get("send_message_number").toString().split(",");//发送短信息电话				String customer_name=sendmap.get("customer_name").toString();//客户姓名				Map<String, Object> paramJson=new HashMap<>();				paramJson.put("customer_name", customer_name);					sendJson.put("tel", send_message_number[0]);//电话				sendJson.put("paramJson", gson.toJson(paramJson));//参书				try {					SysUtil.sendMsg(sendJson);// 发送短信				} catch (Exception e) {					e.printStackTrace();					resStr = "error";					return resStr;				}				log.setWms_cre_credit_notary_warn_id(Integer.valueOf(sendmap						.get("wms_cre_credit_notary_warn_id").toString()));				log.setSend_message_date(datetime);// 时间				log.setSend_message_result(gson.toJson(paramJson));// 参数内容				log.setSend_message_type("2");//发送短信息类型 1还款提醒 2生日提醒				log.setSend_message_code(tpl_id);// 短信息模板编号				log.setSend_message_phone_number(send_message_number[0]);// 发送短信息号码				log.setCreate_user_id(user.getUserId());// 创建人id				log.setCreate_user_name(user.getRealname());// 创建人姓名				log.setCreate_timestamp(datetime);// 创建人姓名				log.setEnable_flag("1");				listLog.add(log);			}		}		ret = wmscrecreditsendmessagelogDao.saveBatch(listLog);		if (ret == 0) {			resStr = "error";		}		return resStr;	}		/**     *      * @Title: sendMessageForRepaymentReminder     * @Description: TODO(还款提醒页面发送短信)     * @param bean     * @param user     * @return      * @author: wangyihan     * @time:2016年11月16日 上午10:18:55     * history:     * 1、2016年11月16日 wangyihan 创建方法     */	@Override    @Transactional	public String sendMessageForRepaymentReminder(WmsCreCreditSendMessageLogSearchBeanVO queryInfo, UserBean user) {	    String resStr = "success";                try        {            List<WmsCreCreditNotaryWarn> no_same_list = JSON.parseArray(queryInfo.getWms_cre_credit_notary_warn_list_json(), WmsCreCreditNotaryWarn.class);            /*Set<WmsCreCreditNotaryWarn> no_same_list = new HashSet<WmsCreCreditNotaryWarn>();            for(WmsCreCreditNotaryWarn bean : list) {                no_same_list.add(bean);            } */            //发送短信            // 短信模板id            String tpl_id = "2101";            List<WmsCreCreditSendMessageLog> listLog = new ArrayList<WmsCreCreditSendMessageLog>();            Map<String, String> sendJson = new HashMap<String, String>();            //短信模板id            sendJson.put("tpl_id", tpl_id);            Gson gson = new Gson();            // 当前时间            Timestamp datetime = new Timestamp(System.currentTimeMillis());            String tmp_refund_number = "";                        Map<String, Object> paramJson = new HashMap<String, Object>();            //循环发送短信            for(WmsCreCreditNotaryWarn bean: no_same_list) {                WmsCreCreditSendMessageLog log = new WmsCreCreditSendMessageLog();                //发送短信息电话                String send_message_number[] = bean.getSend_message_number().split(",");                paramJson = new HashMap<String, Object>();                //客户姓名                paramJson.put("customer_name", bean.getCustomer_name());                  //电话                sendJson.put("tel", send_message_number[0]);                paramJson.put("current_repay_date", bean.getCurrent_repay_date().toString());                //需求变更：月还款金额改为应还款金额                paramJson.put("refund_limit_month", bean.getShould_repay_principal());                paramJson.put("refund_bank", bean.getRefund_bank());                                tmp_refund_number = bean.getRefund_number();                if(StringUtils.isNotEmpty(tmp_refund_number)) {                    tmp_refund_number = tmp_refund_number.replace(" ", "");                    tmp_refund_number = tmp_refund_number.substring(0, 3) + "*" + tmp_refund_number.substring(tmp_refund_number.length() - 4, tmp_refund_number.length());                }                paramJson.put("refund_number", tmp_refund_number);                //参数                sendJson.put("paramJson", gson.toJson(paramJson));                try {                    SysUtil.sendMsg(sendJson);// 发送短信                    //System.out.println(sendJson);                } catch (Exception e) {                    e.printStackTrace();                    resStr = "error";                    return resStr;                }                log.setWms_cre_credit_notary_warn_id(bean.getWms_cre_credit_notary_warn_id());                // 时间                log.setSend_message_date(datetime);                // 参数内容                log.setSend_message_result(gson.toJson(paramJson));                //发送短信息类型 1还款提醒 2生日提醒                log.setSend_message_type("1");                // 短信息模板编号                log.setSend_message_code(tpl_id);                // 发送短信息号码                log.setSend_message_phone_number(send_message_number[0]);                // 创建人id                log.setCreate_user_id(user.getUserId());                // 创建人姓名                log.setCreate_user_name(user.getRealname());                // 创建人姓名                log.setCreate_timestamp(datetime);                log.setEnable_flag("1");                listLog.add(log);            }                        WmsCreCreditNotaryWarn wmsCreCreditNotaryWarn = new WmsCreCreditNotaryWarn();            if(queryInfo.getWms_cre_credit_notary_warn_id_arr() != null && queryInfo.getWms_cre_credit_notary_warn_id_arr().length > 0) {                //更新主表发送短信时间                for(Integer id : queryInfo.getWms_cre_credit_notary_warn_id_arr()) {                    wmsCreCreditNotaryWarn = new WmsCreCreditNotaryWarn();                    wmsCreCreditNotaryWarn.setWms_cre_credit_notary_warn_id(id);                    wmsCreCreditNotaryWarn.setSend_message_date(datetime);                    wmsCreCreditNotaryWarn.setLast_update_user_id(user.getUserId());                    wmsCreCreditNotaryWarn.setLast_update_timestamp(datetime);                    this.wmsCreCreditNotaryWarnDao.update(wmsCreCreditNotaryWarn);                }            }            if(listLog.size() > 0) {                wmscrecreditsendmessagelogDao.saveBatch(listLog);            }        }        catch (Exception e)        {            resStr = "error";        }                return resStr;	}		    }